"""
Configuration file for Buildbot trac to GitHub issue migration
"""
# pylint:disable=C0301,C0103
from textwrap import dedent


trac = {
    # Migrate tickets from these milestones only
    'milestones': [
        '0.9.5',
        '0.9.4',
        '0.9.3',
    ],
    # don't migrate tickets created before this date
    'min_year': 2014,
    # Use this Trac environment
    'env': '/usr/www/trac',

    # Do not write anything back to the trac environment.
    # This options helps when you want to *create* an issue on the GitHub side,
    # but you do not want to modify the original tickets.
    'read_only': True,

    # Exclude these tickets from the migration
    'exclude': [
    ],

    # Add this line upon a ticket migration
    'template': 'This ticket was migrated to GitHub [{github_url} #{github_id}].'
}


github = {
    # Use this token for GitHub operations
    'token': 'token',

    # Migrate tickets to this particular repository
    'owner': 'owner',
    'repository': 'repository',

    # upstream repository where to find commits matching user emails
    'upstream_owner': 'owner',
    'upstream_repository': 'repository',

    # these are username/e-mail to GitHub user mapping
    'mapping': {
        # 'user@example.org': '@somenick',
        # 'user': '@othernick'
    },

    # If present and non None, the name of the file to load/save intermediate
    # user mappings.  This might help in situations when the rate limit for
    # searching users is hit and the script stops pre-maturely.
    'user_cache': 'users.json',

    # This template is used for the body of the newly created issue
    'template': dedent("""\
        This ticket is a migrated Trac ticket [{trac_id}]({trac_url})

        People contributed to the original ticket: {users}

        ---

        {body}

        ---
    """)
}

# vim:ft=python:
